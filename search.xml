<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>廖雪峰Git教程01-git简介</title>
      <link href="/2020/05/17/liao-xue-feng-git-jiao-cheng-01-git-jian-jie/"/>
      <url>/2020/05/17/liao-xue-feng-git-jiao-cheng-01-git-jian-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener">Git简介</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git是目前世界上最先进的分布式版本控制系统(没有之一). </p><h3 id="Git诞生"><a href="#Git诞生" class="headerlink" title="Git诞生"></a>Git诞生</h3><p>由于Linus不满<code>CVS</code>等集中式版本控制系统, 并被BitMover公司威胁收回BitKeeper的免费使用权, Linus花了两周时间用<code>C</code>写出了<code>Git</code>. </p><h3 id="集中式-vs-分布式"><a href="#集中式-vs-分布式" class="headerlink" title="集中式 vs 分布式"></a>集中式 vs 分布式</h3><p>集中式版本控制系统, 版本库是集中存放在中央服务器的, 而干活的时候, 用的都是自己的电脑, 所以要先从中央服务器取得最新的版本, 然后开始干活, 干完活了, 再把自己的活推送给中央服务器. </p><p><strong>最大的缺点:</strong> 必须联网才能工作. </p><p>分布式版本控制系统根本没有”中央服务器”, 每个人的电脑上都是一个完整的版本库, 这样, 你工作的时候, 就不需要联网了, 因为版本库就在你自己的电脑上. </p><p>既然每个人电脑上都有一个完整的版本库, 那多个人如何协作呢？比方说你在自己电脑上改了文件<code>A</code>, 你的同事也在他的电脑上改了文件<code>A</code>, 这时, 你们俩之间只需把各自的修改推送给对方, 就可以互相看到对方的修改了. </p><p><strong>分布式优点:</strong> 安全性高, 不用必须联网</p><p>在实际使用分布式版本控制系统的时候, 其实很少在两人之间的电脑上推送版本库的修改, 因为可能你们俩不在一个局域网内, 两台电脑互相访问不了, 也可能今天你的同事病了, 他的电脑压根没有开机. 因此, 分布式版本控制系统通常也有一台充当”中央服务器”的电脑, 但这个服务器的作用仅仅是用来方便”交换”大家的修改, 没有它大家也一样干活, 只是交换修改不方便而已. </p><p><strong>Git还有强大的分支管理</strong></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>这个不需要教程了吧, <code>Linux</code>一条命令, <code>Windows</code>下载安装包安装. </p><p>安装完成后, 设置<code>Git</code>:</p><pre class=" language-shell"><code class="language-shell">$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"</code></pre><p>因为<code>Git</code>是分布式系统, 所以必须自报家门: 你的姓名和<code>Email</code>地址. </p><p><code>--global</code>参数表示你这台机器上所有<code>Git</code>仓库都会使用这个配置, 当然也可以对某个仓库指定不同的用户名和<code>Email</code>地址, 在仓库里面使用<code>git config</code>命令, 不带<code>--global</code>就好了. </p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>又名仓库, <code>repository</code>, 在这个目录下所有文件都可以被Git管理起来, 每个文件的修改, 删除, Git都能跟踪, 以便任何时刻都可以追踪历史, 或者在将来某个时刻可以还原. </p><blockquote><p>Windows系统,确保目录名, 包括父目录不包含英文, 以免出现莫名其妙的问题</p></blockquote><pre class=" language-shell"><code class="language-shell">$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>在某个目录下创建(初始化)一个<code>Git</code>仓库. </p><h4 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h4><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><blockquote><p>千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。</p></blockquote><p>在刚才初始化的仓库目录下创建一个文件, 比如<code>readme.txt</code>. </p><p>这里只是创建了文件, 但是还没有把<code>readme.txt</code>放进<code>Git</code>仓库. </p><p>把一个文件放进<code>Git</code>只需要两步. </p><ol><li><p>用命令<code>git add</code>告诉Git, 把文件添加到仓库. </p><pre class=" language-shell"><code class="language-shell">git add readme.txt</code></pre></li></ol><ol start="2"><li><p>用命令<code>git commit</code>告诉<code>Git</code>, 把文件提交到仓库:</p><pre class=" language-shell"><code class="language-shell">git commit -m "wrote a reame file"</code></pre><p><code>git commit</code>命令, <code>-m</code>后面输入的是本次提交的说明. 虽然可以不填, 但是不建议, 这是一个良好习惯. </p><p><code>git commit</code>执行成功会告诉你被改动了几个文件, 修改了几行内容. </p></li></ol><p>为什么需要<code>add</code>, <code>commit</code>两步呢?</p><p>​    因为<code>commit</code>可以一次提交很多文件, 所以你可以多次<code>add</code>不同的文件, 比如: </p><pre class=" language-shell"><code class="language-shell">$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m "add 3 files."</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下今天学的两点内容：</p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &quot;summary&quot;</code>，完成。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> LiaoXueFeng_GitCourse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的自我修养</title>
      <link href="/2020/05/11/book-cheng-xu-yuan-de-zi-wo-xiu-yang/"/>
      <url>/2020/05/11/book-cheng-xu-yuan-de-zi-wo-xiu-yang/</url>
      
        <content type="html"><![CDATA[<h2 id="《程序员的自我修养》"><a href="#《程序员的自我修养》" class="headerlink" title="《程序员的自我修养》"></a>《程序员的自我修养》</h2><p>作者 <em>陈逸鹤</em></p><p><img src="/2020/05/11/book-cheng-xu-yuan-de-zi-wo-xiu-yang/t6_920691.jpg" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>学会了做事/自我完善/增长技术方法:</strong> </p><ul><li>找对方法, 善于沟通, 努力. </li></ul><p><strong>面试时:</strong> </p><ul><li>简历遵循STAR准则, 情景, 目标, 行动, 结果, 表达得一针见血, 清清楚楚才行. </li><li>深刻理解自己所擅长的, 扬长避短. </li><li>打牢基础, 有技术深度</li></ul><p><strong>你应该了解的事:</strong> </p><ul><li><p>掌握英语</p></li><li><p>学会包装</p></li><li><p>也看些与技术无关的书</p></li><li><p>会写文档</p></li><li><p>勇敢交流, 并维持社会关系</p></li><li><p>提高效率, 用于持续学习</p><ul><li>想办法解决重复低效的工作</li><li>加快工作节奏</li><li>借助工具完成工作</li></ul></li></ul><p><strong>对提升程序员思维有所帮助的几点建议:</strong> </p><ul><li>长期不间断地编程实践</li><li>持续地学习与借鉴(参考)</li><li>学会反思，并像专家一样思考</li></ul><h3 id="第一章-谈职业生涯"><a href="#第一章-谈职业生涯" class="headerlink" title="第一章 谈职业生涯"></a>第一章 谈职业生涯</h3><ol><li><p>正确认识自己</p></li><li><p><strong>比一般人更努力</strong></p></li><li><p>建立个人权威或品牌</p></li><li><p>遵循最佳实践</p></li><li><p>乐于探索新事物</p></li><li><p>善于沟通</p></li><li><p>为优秀的人工作</p></li><li><p>生活, 睡眠, 旅行</p><p>你需要合理规划自己的时间分配（学习、阅读、写代码）并持之以恒地去做. </p></li><li><p>相信自己的天赋和创造力</p><ul><li>阅读<ul><li>记录和搜集<ul><li>尝试动手</li></ul></li></ul></li></ul></li></ol><p>如果这些没用, 遵循第二条, 所以这章最主要是<strong>比别人更努力</strong>(甚至是全文重点, 找对方法, 善于沟通, 努力不懈). </p><h3 id="二、那些程序员们后知后觉的职涯经验"><a href="#二、那些程序员们后知后觉的职涯经验" class="headerlink" title="二、那些程序员们后知后觉的职涯经验"></a>二、那些程序员们后知后觉的职涯经验</h3><ol><li><p>你的薪酬与工作量无关</p><p>你的薪酬其实取决于很多因素，技术能力、经验资历、工作量等，但最本质的却是，你对公司是否重要，换句话说你是否容易被取代。</p></li><li><p>尽可能持续做一件事。</p><p>在某一项技术上达到理想的深度. </p></li><li><p>唯一不变的就是变化本身. </p><p>同样是钻研技术, 提升快速学习的能力. 如此你才能面对不断出现的变化. </p></li><li><p>声誉非常重要</p></li><li><p>沟通</p></li><li><p>学会软技能, 提升一些非技术能力</p></li><li><p>不要轻易说不可能或太简单</p></li><li><p>团队合作(还是沟通)</p></li><li><p>你的能力显而易见</p><p><em>好精辟啊</em></p><blockquote><p>能力来自于大量的编码实践，以及持续学习的能力和勤于思考的习惯。</p></blockquote></li></ol><h3 id="三、如何招到一名靠谱的程序员"><a href="#三、如何招到一名靠谱的程序员" class="headerlink" title="三、如何招到一名靠谱的程序员"></a>三、如何招到一名靠谱的程序员</h3><p>你需要用尽可能简练的文字来描述项目的背景，你在项目中承担的角色、参与项目的时长，你用到的技术，以及你在项目中的亮点等信息。优秀的程序员们往往善于归纳，并能够一针见血地发现问题或把一个问题说清楚。</p><p>请谈谈你在这个项目中遇到的最大困难或挑战是什么，你是如何解决的。从面试者对上面这个问题的回答中，我能够很好地判断他是否有较强的独立解决问题的能力，而我认为这是除技术能力之外，程序员最应具备的能力。</p><p><em>所以说真的要写blog，并且不断挖掘其中原理</em></p><blockquote><p>请谈谈你在这个项目中遇到的最大困难或挑战是什么，你是如何解决的。<br>从面试者对上面这个问题的回答中，我能够很好地判断他是否有较强的独立解决问题的能力，而我认为这是除技术能力之外，程序员最应具备的能力。</p></blockquote><h3 id="四、每个程序员都应该了解的一件事"><a href="#四、每个程序员都应该了解的一件事" class="headerlink" title="四、每个程序员都应该了解的一件事"></a>四、每个程序员都应该了解的一件事</h3><p>学会包装<br>也看些与技术无关的书<br>会写文档<br>勇敢交流</p><h3 id="五、程序员的烦恼"><a href="#五、程序员的烦恼" class="headerlink" title="五、程序员的烦恼"></a>五、程序员的烦恼</h3><p>想办法解决重复低效的工作，而不是逃避它们你不应该总是陷入在那些处理杂事的循环往复之中，跳出来，创造更好的方式去解决它们才是应对之策。</p><p>创业大多是在一个新的领域中进行的，你不应仅仅专注于公司所使用的那些技术，而更需要通过深入理解这个新的领域，去获得不同的视角和眼光，因为它们也会在未来成为你的核心竞争力。</p><p>技术是需要深耕的，深入学习一门主流的开发技术，并不断提升编程思维，比对很多技术栈都浅尝辄止要好很多。</p><h3 id="六、提给年轻程序员的职涯建议"><a href="#六、提给年轻程序员的职涯建议" class="headerlink" title="六、提给年轻程序员的职涯建议"></a>六、提给年轻程序员的职涯建议</h3><p>这就是自己的弱点，静不下来，快不起来应该尽可能地提高自己的工作效率。</p><p>应该尽可能地提高自己的工作效率。</p><p><em>用好工具，加快节奏，专注于此</em></p><blockquote><p>对于提高工作效率，我有以下两点建议：<br>•加快工作节奏。<br>•借助工具完成工作。</p></blockquote><p><em>好赞同</em></p><blockquote><p>掌握英语<br>如果你在外企，那么英语作为一项必备技能是非常重要的。但即使你是在一家国内的企业，你仍然应该掌握英语，因为它能够帮助你获得更宽广的视野，带来更多的工作机会。</p></blockquote><p>睡眠使你更加强大</p><h3 id="第二章-谈实践与认知"><a href="#第二章-谈实践与认知" class="headerlink" title="第二章 谈实践与认知"></a>第二章 谈实践与认知</h3><h3 id="一、突破程序员思维"><a href="#一、突破程序员思维" class="headerlink" title="一、突破程序员思维"></a>一、突破程序员思维</h3><p>程序员思维是由常人的思维+编程思维，在长期相互作用下产生的一种思维模式。它能够帮助程序员快速找到以程序方式解决现实问题的最优解。</p><p>对提升程序员思维有所帮助的几点建议: </p><ul><li>长期不间断地编程实践</li><li>持续地学习与借鉴(参考)</li><li>学会反思，并像专家一样思考</li></ul><p>为什么要突破:</p><ul><li>只有全面才能走得更远. </li></ul><p>如何突破: </p><ul><li><p>寻找本质</p></li><li><p>多看杂学(非本专业领域), 获取不同视角</p></li></ul><h3 id="二、全栈工程师如何快速构建一个Web应用"><a href="#二、全栈工程师如何快速构建一个Web应用" class="headerlink" title="二、全栈工程师如何快速构建一个Web应用"></a>二、全栈工程师如何快速构建一个Web应用</h3><p>Web开发的各个重要阶段: </p><ol><li>网站定位与功能设定(受众, 核心功能)</li><li>信息架构(比如面向对象, 等优秀的架构[你懂的, 比如UML]和设计思想)</li><li>UI设计</li><li>应用架构(前后端框架)</li><li>开发</li><li>部署</li><li>性能调优</li><li>*网站数据统计</li></ol><p>文档的必要性: </p><ul><li>仅当确认文档能够产生价值时，才去编写它们, 如果编写, 则要清晰明白。</li></ul><h3 id="三、如何成为一名优秀的全栈工程师"><a href="#三、如何成为一名优秀的全栈工程师" class="headerlink" title="三、如何成为一名优秀的全栈工程师"></a>三、如何成为一名优秀的全栈工程师</h3><p>全栈工程师的定义: </p><p>我认为全栈工程师应该同时是一位资深开发工程师、架构师，以及具有敏捷开发技能的程序员。</p><p>要掌握所有技术是根本不可能的，而成为全栈工程师也并不需要你真得掌握所有的技术，你应该将自己的精力聚焦在关键开发技能，以及一些必须掌握的附加技能上。</p><p>但你需要掌握: </p><ol><li><p>关键开发技能(硬实力)</p></li><li><p>软实力</p><ol><li><p>沟通</p></li><li><p>问题解决能力</p></li><li><p><strong>时间管理</strong>(我觉得这是人生最重要的事情)</p></li><li><p>好奇心</p><ul><li>对于将持续学习作为一种生活习惯的人来说，学习新东西并不会成为一种负担，反而是一种乐趣。</li></ul><ol start="5"><li>领导力</li></ol></li></ol></li><li><p>你应该走出去</p><ul><li>优秀的全栈工程师不应局限于自己的工作，他更应该走出去，接触不同的技术，分享自己的经验和心得，认识更多的朋友。</li><li>可以参加很多大会, 参加线下活动</li><li>可以写个人博客, 每天进步一点点</li></ul></li></ol><h3 id="五、重构——系统改善之道"><a href="#五、重构——系统改善之道" class="headerlink" title="五、重构——系统改善之道"></a>五、重构——系统改善之道</h3><p>应该持续重构, 这个要专门学习, 概括不完</p><h3 id="六、程序员也该懂得”这样就好”"><a href="#六、程序员也该懂得”这样就好”" class="headerlink" title="六、程序员也该懂得”这样就好”"></a>六、程序员也该懂得”这样就好”</h3><p>无必要, 不应该增加太多附加功能, 而应该专注于现有功能的优化. </p><p>做产品应该注意: </p><ul><li>不盲目使用新技术</li><li>避免过度设计</li><li>不在项目中技术镀金——指在开发中追求技术的过度完美性, 而极大增加了工作量. </li></ul><h3 id="七、走出软件开发法则"><a href="#七、走出软件开发法则" class="headerlink" title="七、走出软件开发法则"></a>七、走出软件开发法则</h3><ol><li>面向对象</li><li>测试很重要<ol><li>集成测试越早越好</li></ol></li><li>合理运用新的方法论</li></ol><h3 id="九、一名全栈工程师的Mac工具箱（设计、开发、效率）"><a href="#九、一名全栈工程师的Mac工具箱（设计、开发、效率）" class="headerlink" title="九、一名全栈工程师的Mac工具箱（设计、开发、效率）"></a>九、一名全栈工程师的Mac工具箱（设计、开发、效率）</h3><p>学习任何一个工具软件都需要花费时间或是金钱，因此应选择那些值得投资的软件或工具去购买和学习。(<strong>我觉得这句话非常好</strong>)</p><h3 id="十、我似乎理解了编程的意义"><a href="#十、我似乎理解了编程的意义" class="headerlink" title="十、我似乎理解了编程的意义"></a>十、我似乎理解了编程的意义</h3><p>看这本书是为了明白你要从事的职业需要做什么，学什么，怎么做，将来如何发展</p><h3 id="第三章-谈个人发展"><a href="#第三章-谈个人发展" class="headerlink" title="第三章 谈个人发展"></a>第三章 谈个人发展</h3><h3 id="一、那些优秀程序员身上的共同特质"><a href="#一、那些优秀程序员身上的共同特质" class="headerlink" title="一、那些优秀程序员身上的共同特质"></a>一、那些优秀程序员身上的共同特质</h3><ol><li><p>至少深入理解一门编程语言</p></li><li><p>看上去有些“傻”</p><ol><li>“傻”——知道自己不够聪明, 努力变得更加强大. </li></ol></li><li><p>他们都是现实主义者</p><ol><li>优秀的程序员懂得平衡</li></ol></li><li><p>从失败中学习</p></li><li><p>很懒又很高效</p><ol><li>他们能够熟练地使用IDE，他们不依赖菜单，而是使用快捷键来操控代码，从查找文件、文本编辑到格式化代码、文本替换都尽可能使用快捷键，这使得他们的开发工作更加连贯，也更高效。•他们善于使用或发明工具，他们寻找一切能提高效率的工具，必要时他们还自己编写自动化脚本、发明新的工具，从而彻底抛开那些恼人的重复劳动或机械性工作。</li></ol></li><li><p>善于发现并改造轮子</p></li><li><p>还是时间管理</p></li><li><p>还是软技能</p></li></ol><h3 id="三、专家与普通人的区别在于觉察力"><a href="#三、专家与普通人的区别在于觉察力" class="headerlink" title="三、专家与普通人的区别在于觉察力"></a>三、专家与普通人的区别在于觉察力</h3><p>同样的，在编程领域，专家与普通人的区别也在于是否能够更好地解决问题，而解决问题的关键又在于程序员身上的敏锐觉察力。</p><h3 id="六、建立自己的个人品牌"><a href="#六、建立自己的个人品牌" class="headerlink" title="六、建立自己的个人品牌"></a>六、建立自己的个人品牌</h3><p>建立个人品牌</p><h3 id="九、你也可以写出优秀的技术博客"><a href="#九、你也可以写出优秀的技术博客" class="headerlink" title="九、你也可以写出优秀的技术博客"></a>九、你也可以写出优秀的技术博客</h3><p>要写blog</p><p><em>收益良多</em></p><blockquote><p>下面是我经常采用的写作步骤：<br>①确定一个要写的主题。<br>②在网上寻找到那些能够帮助你完善观点的参考资料。<br>③列出文章的提纲。<br>④根据提纲完善内容。<br>⑤反复修改，直到文章通顺易读（有时我也会找人试读，并听取他们的意见）。<br>⑥给文章配一个好的标题。<br>⑦发布你的文章。</p></blockquote><p>下面是我经常采用的写作步骤：</p><ol><li><p>确定一个要写的主题。</p></li><li><p>在网上寻找到那些能够帮助你完善观点的参考资料。</p></li><li><p>列出文章的提纲。</p></li><li><p>根据提纲完善内容。</p></li><li><p>反复修改，直到文章通顺易读（有时我也会找人试读，并听取他们的意见）。</p></li><li><p>给文章配一个好的标题。</p></li><li><p>发布你的文章。</p></li><li></li></ol><h3 id="二、为什么我们不再购买技术类书籍"><a href="#二、为什么我们不再购买技术类书籍" class="headerlink" title="二、为什么我们不再购买技术类书籍"></a>二、为什么我们不再购买技术类书籍</h3><p>因为基础扎实, 技术深度足够, 见识广博后可以直接读文档. </p><p>但仍应该学习: 人物传记、实践方法、设计思想类和其他人文类书籍. </p><h3 id="五、写作与写代码"><a href="#五、写作与写代码" class="headerlink" title="五、写作与写代码"></a>五、写作与写代码</h3><p>都是将细节组合成更美的东西</p><h3 id="第五章-谈自学设计"><a href="#第五章-谈自学设计" class="headerlink" title="第五章 谈自学设计"></a>第五章 谈自学设计</h3><p>学习思想，而不是形于工具，编程也是如此，不要一直跟潮配置不同的环境。</p><p>我要找的是那些优秀设计师们自己对于设计的感悟、设计心得、推荐阅读的设计类书籍等。</p><p><em>专注于手中事</em></p><blockquote><p>你所做的每一件事情，它的背后都可以和艺术联系在一起。只要是付出了努力，精心制作，并能反映出作者情感与灵魂的东西都可以称为艺术品</p></blockquote><p>你所做的每一件事情，它的背后都可以和艺术联系在一起。只要是付出了努力，精心制作，并能反映出作者情感与灵魂的东西都可以称为艺术品. </p><h3 id="二、那些永恒的设计原则"><a href="#二、那些永恒的设计原则" class="headerlink" title="二、那些永恒的设计原则"></a>二、那些永恒的设计原则</h3><p>设计应源于对问题本身的思考，并做出能够解决问题的相应设计。</p><h3 id="四、因为“美”而学习设计"><a href="#四、因为“美”而学习设计" class="headerlink" title="四、因为“美”而学习设计"></a>四、因为“美”而学习设计</h3><p>而那一刻，我明白了“美”无法从自以为是或简单模仿中获得. </p><h3 id="五、浅谈企业级产品设计"><a href="#五、浅谈企业级产品设计" class="headerlink" title="五、浅谈企业级产品设计"></a>五、浅谈企业级产品设计</h3><p>我们可以尝试改变与用户的沟通策略，通过一些需求讨论会，更多地了解他们的实际工作，而不是直接让他们给出设计建议。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Books </tag>
            
            <tag> Professional </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
